# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: control.proto, message_formats.proto, req_rep.proto, telemetry.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf


class Model(betterproto.Enum):
    """* Drone models produced by Blueye"""

    MODEL_UNSPECIFIED = 0
    MODEL_PIONEER = 1
    MODEL_PRO = 2
    MODEL_X3 = 3


class PressureSensorType(betterproto.Enum):
    """* Depth sensors used by the drone."""

    PRESSURE_SENSOR_TYPE_UNSPECIFIED = 0
    PRESSURE_SENSOR_TYPE_NOT_CONNECTED = 1
    PRESSURE_SENSOR_TYPE_MS5837_30BA26 = 2
    PRESSURE_SENSOR_TYPE_KELLER_PA7LD = 3
    PRESSURE_SENSOR_TYPE_MS5637_02BA03 = 4


class Resolution(betterproto.Enum):
    """* Available camera resolutions."""

    RESOLUTION_UNSPECIFIED = 0
    RESOLUTION_FULLHD_1080P = 1
    RESOLUTION_HD_720P = 2


class Framerate(betterproto.Enum):
    """* Available camera framerates."""

    FRAMERATE_UNSPECIFIED = 0
    FRAMERATE_FPS_30 = 1
    FRAMERATE_FPS_25 = 2


class Camera(betterproto.Enum):
    """* Which camera to control."""

    CAMERA_UNSPECIFIED = 0
    CAMERA_MAIN = 1
    CAMERA_GUESTPORT = 2


class TemperatureUnit(betterproto.Enum):
    """* Available temperature units."""

    TEMPERATURE_UNIT_UNSPECIFIED = 0
    TEMPERATURE_UNIT_CELSIUS = 1
    TEMPERATURE_UNIT_FAHRENHEIT = 2


class LogoType(betterproto.Enum):
    """* Available logo types."""

    LOGO_TYPE_UNSPECIFIED = 0
    LOGO_TYPE_NONE = 1
    LOGO_TYPE_DEFAULT = 2
    LOGO_TYPE_CUSTOM = 3


class DepthUnit(betterproto.Enum):
    """* Available depth units."""

    DEPTH_UNIT_UNSPECIFIED = 0
    DEPTH_UNIT_METERS = 1
    DEPTH_UNIT_FEET = 2


class ThicknessUnit(betterproto.Enum):
    """* Available thickness units."""

    THICKNESS_UNIT_UNSPECIFIED = 0
    THICKNESS_UNIT_MILLIMETERS = 1
    THICKNESS_UNIT_INCHES = 2


class FontSize(betterproto.Enum):
    """* Available font sizes for overlay text elements."""

    FONT_SIZE_UNSPECIFIED = 0
    FONT_SIZE_PX15 = 1
    FONT_SIZE_PX20 = 2
    FONT_SIZE_PX25 = 3
    FONT_SIZE_PX30 = 4
    FONT_SIZE_PX35 = 5
    FONT_SIZE_PX40 = 6


class GuestPortDeviceId(betterproto.Enum):
    """* GuestPort device ID."""

    GUEST_PORT_DEVICE_ID_UNSPECIFIED = 0
    GUEST_PORT_DEVICE_ID_BLIND_PLUG = 1
    GUEST_PORT_DEVICE_ID_TEST_STATION = 2
    GUEST_PORT_DEVICE_ID_DEBUG_SERIAL = 3
    GUEST_PORT_DEVICE_ID_BLUEYE_LIGHT = 4
    GUEST_PORT_DEVICE_ID_BLUEYE_CAM = 5
    GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_LUMEN = 6
    GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_NEWTON = 7
    GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_PING_SONAR = 8
    GUEST_PORT_DEVICE_ID_BLUEPRINT_LAB_REACH_ALPHA = 9
    GUEST_PORT_DEVICE_ID_WATERLINKED_DVL_A50 = 10
    GUEST_PORT_DEVICE_ID_IMPACT_SUBSEA_ISS360 = 11
    GUEST_PORT_DEVICE_ID_BLUEPRINT_SUBSEA_SEATRAC_X010 = 12
    GUEST_PORT_DEVICE_ID_BLUEPRINT_SUBSEA_OCULUS_M750D = 13
    GUEST_PORT_DEVICE_ID_CYGNUS_MINI_ROV_THICKNESS_GAUGE = 14
    GUEST_PORT_DEVICE_ID_BLUE_ROBOTICS_PING360_SONAR = 15
    GUEST_PORT_DEVICE_ID_TRITECH_GEMINI_720IM = 16
    GUEST_PORT_DEVICE_ID_BLUEYE_LIGHT_PAIR = 17
    GUEST_PORT_DEVICE_ID_TRITECH_GEMINI_MICRON = 18
    GUEST_PORT_DEVICE_ID_OCEAN_TOOLS_DIGICP = 19
    GUEST_PORT_DEVICE_ID_TRITECH_GEMINI_720IK = 20
    GUEST_PORT_DEVICE_ID_NORTEK_NUCLEUS_1000 = 21


class NavigationSensorId(betterproto.Enum):
    """
    * List of navigation sensors that can be used by the position observer
    """

    NAVIGATION_SENSOR_ID_UNSPECIFIED = 0
    NAVIGATION_SENSOR_ID_WATERLINKED_DVL_A50 = 1
    NAVIGATION_SENSOR_ID_WATERLINKED_UGPS_G2 = 2


class GuestPortError(betterproto.Enum):
    """* GuestPort error."""

    GUEST_PORT_ERROR_UNSPECIFIED = 0
    GUEST_PORT_ERROR_NOT_CONNECTED = 1
    GUEST_PORT_ERROR_READ_ERROR = 2
    GUEST_PORT_ERROR_NOT_FLASHED = 3
    GUEST_PORT_ERROR_CRC_ERROR = 4
    GUEST_PORT_ERROR_PARSE_ERROR = 5


class PingerConfigurationMountingDirection(betterproto.Enum):
    MOUNTING_DIRECTION_UNSPECIFIED = 0
    MOUNTING_DIRECTION_FORWARDS = 1
    MOUNTING_DIRECTION_DOWNWARDS = 2


class BatteryBq40Z50BatteryStatusBatteryError(betterproto.Enum):
    """* Battery errror code from BQ40Z50 BMS data sheet."""

    BATTERY_ERROR_UNSPECIFIED = 0
    BATTERY_ERROR_OK = 1
    BATTERY_ERROR_BUSY = 2
    BATTERY_ERROR_RESERVED_COMMAND = 3
    BATTERY_ERROR_UNSUPPORTED_COMMAND = 4
    BATTERY_ERROR_ACCESS_DENIED = 5
    BATTERY_ERROR_OVERFLOW_UNDERFLOW = 6
    BATTERY_ERROR_BAD_SIZE = 7
    BATTERY_ERROR_UNKNOWN_ERROR = 8


class CalibrationStateStatus(betterproto.Enum):
    """
    * Status of the compass calibration procedure. When calibration is started,
    the status will indicate the active (upfacing) axis.
    """

    STATUS_UNSPECIFIED = 0
    STATUS_NOT_CALIBRATING = 1
    STATUS_CALIBRATING_NO_AXIS = 2
    STATUS_CALIBRATING_X_POSITIVE = 3
    STATUS_CALIBRATING_X_NEGATIVE = 4
    STATUS_CALIBRATING_Y_POSITIVE = 5
    STATUS_CALIBRATING_Y_NEGATIVE = 6
    STATUS_CALIBRATING_Z_POSITIVE = 7
    STATUS_CALIBRATING_Z_NEGATIVE = 8
    STATUS_CALIBRATING_THRUSTER = 9


@dataclass(eq=False, repr=False)
class BinlogRecord(betterproto.Message):
    """
    * Wrapper message for each entry in the drone telemetry logfile. Each entry
    contains the unix timestamp in UTC, the monotonic timestamp (time since
    boot), and an Any message wrapping the custom Blueye message. See separate
    documentation for the logfile format for more details.
    """

    payload: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(1)
    unix_timestamp: datetime = betterproto.message_field(2)
    clock_monotonic: datetime = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MotionInput(betterproto.Message):
    """
    * Motion input from client. Used to indicate the desired motion in each
    direction. Typically these values map to the left and right joystick for
    motion, and the left and right trigger for the slow and boost modifiers.
    """

    surge: float = betterproto.float_field(1)
    sway: float = betterproto.float_field(2)
    heave: float = betterproto.float_field(3)
    yaw: float = betterproto.float_field(4)
    slow: float = betterproto.float_field(5)
    boost: float = betterproto.float_field(6)


@dataclass(eq=False, repr=False)
class Lights(betterproto.Message):
    """
    * Lights message used to represent the intensity of the main light or
    external lights.
    """

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class LatLongPosition(betterproto.Message):
    """* Latitude and longitude position in WGS 84 format."""

    latitude: float = betterproto.double_field(1)
    longitude: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class ConnectionDuration(betterproto.Message):
    """* Connection duration of a remote client."""

    value: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AutoHeadingState(betterproto.Message):
    """* Auto heading state."""

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class AutoDepthState(betterproto.Message):
    """* Auto depth state."""

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class AutoAltitudeState(betterproto.Message):
    """* Auto altitude state."""

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class StationKeepingState(betterproto.Message):
    """* Station keeping state."""

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class WeatherVaningState(betterproto.Message):
    """* Weather vaning state."""

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ControlMode(betterproto.Message):
    """* Control mode from drone supervisor"""

    auto_depth: bool = betterproto.bool_field(1)
    auto_heading: bool = betterproto.bool_field(2)
    auto_altitude: bool = betterproto.bool_field(3)
    station_keeping: bool = betterproto.bool_field(4)
    weather_vaning: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class TiltStabilizationState(betterproto.Message):
    """
    * Tilt stabilization state. Blueye drones with mechanical tilt has the
    ability to enable camera stabilization.
    """

    enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SystemTime(betterproto.Message):
    """* System time."""

    unix_timestamp: datetime = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GripperVelocities(betterproto.Message):
    """* Gripper velocity values."""

    grip_velocity: float = betterproto.float_field(1)
    rotate_velocity: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class ClientInfo(betterproto.Message):
    """* Information about a remote client."""

    type: str = betterproto.string_field(1)
    version: str = betterproto.string_field(2)
    device_type: str = betterproto.string_field(3)
    platform: str = betterproto.string_field(4)
    platform_version: str = betterproto.string_field(5)
    name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ConnectedClient(betterproto.Message):
    """
    * Information about a connected client with an id assigned by the drone.
    """

    client_id: int = betterproto.uint32_field(1)
    client_info: "ClientInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RecordState(betterproto.Message):
    """* Camera recording state."""

    main_is_recording: bool = betterproto.bool_field(1)
    main_seconds: int = betterproto.int32_field(2)
    guestport_is_recording: bool = betterproto.bool_field(3)
    guestport_seconds: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WaterDensity(betterproto.Message):
    """
    * Water density. Used to specify the water density the drone is operating
    in, to achieve more accruate depth measurements.
    """

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class PingerConfiguration(betterproto.Message):
    """
    * Pinger configuration. Used to specify the configuration the BR 1D-Pinger.
    """

    mounting_direction: "PingerConfigurationMountingDirection" = betterproto.enum_field(
        1
    )


@dataclass(eq=False, repr=False)
class WaterTemperature(betterproto.Message):
    """
    * Water temperature measured by the drone's combined depth and temperature
    sensor.
    """

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class CpuTemperature(betterproto.Message):
    """* CPU temperature."""

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class CanisterTemperature(betterproto.Message):
    """
    * Canister temperature. Temperature measured in the top and bottom canister
    of the drone.
    """

    top: float = betterproto.float_field(1)
    bottom: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class CanisterHumidity(betterproto.Message):
    """* Canister humidity."""

    top: float = betterproto.float_field(1)
    bottom: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class Battery(betterproto.Message):
    """* Essential battery information."""

    voltage: float = betterproto.float_field(1)
    level: float = betterproto.float_field(2)
    temperature: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class BatteryBq40Z50(betterproto.Message):
    """
    * Battery information message. Detailed information about all aspects of
    the connected Blueye Smart Battery, using the BQ40Z50 BMS.
    """

    voltage: "BatteryBq40Z50Voltage" = betterproto.message_field(1)
    temperature: "BatteryBq40Z50Temperature" = betterproto.message_field(2)
    status: "BatteryBq40Z50BatteryStatus" = betterproto.message_field(4)
    current: float = betterproto.float_field(6)
    average_current: float = betterproto.float_field(7)
    relative_state_of_charge: float = betterproto.float_field(8)
    absolute_state_of_charge: float = betterproto.float_field(9)
    remaining_capacity: float = betterproto.float_field(10)
    full_charge_capacity: float = betterproto.float_field(11)
    runtime_to_empty: int = betterproto.uint32_field(12)
    average_time_to_empty: int = betterproto.uint32_field(13)
    average_time_to_full: int = betterproto.uint32_field(14)
    time_to_full_at_current_rate: int = betterproto.uint32_field(15)
    time_to_empty_at_current_rate: int = betterproto.uint32_field(16)
    charging_current: float = betterproto.float_field(17)
    charging_voltage: float = betterproto.float_field(18)
    cycle_count: int = betterproto.uint32_field(19)
    design_capacity: float = betterproto.float_field(20)
    manufacture_date: datetime = betterproto.message_field(21)
    serial_number: int = betterproto.uint32_field(22)
    manufacturer_name: str = betterproto.string_field(23)
    device_name: str = betterproto.string_field(24)
    device_chemistry: str = betterproto.string_field(25)


@dataclass(eq=False, repr=False)
class BatteryBq40Z50Voltage(betterproto.Message):
    """* Battery voltage levels."""

    total: float = betterproto.float_field(1)
    cell_1: float = betterproto.float_field(2)
    cell_2: float = betterproto.float_field(3)
    cell_3: float = betterproto.float_field(4)
    cell_4: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class BatteryBq40Z50Temperature(betterproto.Message):
    """* Battery temperature."""

    average: float = betterproto.float_field(1)
    cell_1: float = betterproto.float_field(2)
    cell_2: float = betterproto.float_field(3)
    cell_3: float = betterproto.float_field(4)
    cell_4: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class BatteryBq40Z50BatteryStatus(betterproto.Message):
    """* Battery status from BQ40Z50 ref data sheet 0x16."""

    overcharged_alarm: bool = betterproto.bool_field(1)
    terminate_charge_alarm: bool = betterproto.bool_field(2)
    over_temperature_alarm: bool = betterproto.bool_field(3)
    terminate_discharge_alarm: bool = betterproto.bool_field(4)
    remaining_capacity_alarm: bool = betterproto.bool_field(5)
    remaining_time_alarm: bool = betterproto.bool_field(6)
    initialization: bool = betterproto.bool_field(7)
    discharging_or_relax: bool = betterproto.bool_field(8)
    fully_charged: bool = betterproto.bool_field(9)
    fully_discharged: bool = betterproto.bool_field(10)
    error: "BatteryBq40Z50BatteryStatusBatteryError" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class Attitude(betterproto.Message):
    """* The attitude of the drone."""

    roll: float = betterproto.float_field(1)
    pitch: float = betterproto.float_field(2)
    yaw: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class Altitude(betterproto.Message):
    """* Drone altitude over seabed, typically obtained from a DVL."""

    value: float = betterproto.float_field(1)
    is_valid: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ForwardDistance(betterproto.Message):
    """
    * Distance to an object infront of the drone, typically obtained from an 1D
    pinger.
    """

    value: float = betterproto.float_field(1)
    is_valid: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PositionEstimate(betterproto.Message):
    """
    * Position estimate from the Extended Kalman filter based observer if a DVL
    is connected.
    """

    northing: float = betterproto.float_field(1)
    easting: float = betterproto.float_field(2)
    heading: float = betterproto.float_field(3)
    surge_rate: float = betterproto.float_field(4)
    sway_rate: float = betterproto.float_field(5)
    yaw_rate: float = betterproto.float_field(6)
    ocean_current: float = betterproto.float_field(7)
    odometer: float = betterproto.float_field(8)
    is_valid: bool = betterproto.bool_field(9)
    global_position: "LatLongPosition" = betterproto.message_field(10)
    navigation_sensors: List["NavigationSensorStatus"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class Depth(betterproto.Message):
    """* Water depth of the drone."""

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class Reference(betterproto.Message):
    """
    * Reference for the control system. Note that the internal heading referece
    is not relative to North. Use (ControlHealth.heading_error + pose.yaw)
    instead.
    """

    surge: float = betterproto.float_field(1)
    sway: float = betterproto.float_field(2)
    heave: float = betterproto.float_field(3)
    yaw: float = betterproto.float_field(4)
    depth: float = betterproto.float_field(5)
    heading: float = betterproto.float_field(6)
    altitude: float = betterproto.float_field(7)


@dataclass(eq=False, repr=False)
class ControllerHealth(betterproto.Message):
    """
    * Controller health is used for showing the state of the controller with an
    relative error and load from 0 to 1.
    """

    depth_error: float = betterproto.float_field(1)
    depth_health: float = betterproto.float_field(2)
    heading_error: float = betterproto.float_field(3)
    heading_health: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class DiveTime(betterproto.Message):
    """
    * Amount of time the drone has been submerged. The drone starts
    incrementing this value when the depth is above 250 mm.
    """

    value: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class RecordOn(betterproto.Message):
    """* Which cameras are supposed to be recording"""

    main: bool = betterproto.bool_field(1)
    guestport: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class StorageSpace(betterproto.Message):
    """* Storage space."""

    total_space: int = betterproto.int64_field(1)
    free_space: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CalibrationState(betterproto.Message):
    """* Compass calibration state."""

    status: "CalibrationStateStatus" = betterproto.enum_field(1)
    progress_x_positive: float = betterproto.float_field(2)
    progress_x_negative: float = betterproto.float_field(3)
    progress_y_positive: float = betterproto.float_field(4)
    progress_y_negative: float = betterproto.float_field(5)
    progress_z_positive: float = betterproto.float_field(6)
    progress_z_negative: float = betterproto.float_field(7)
    progress_thruster: float = betterproto.float_field(8)


@dataclass(eq=False, repr=False)
class IperfStatus(betterproto.Message):
    """* Connection speed between drone and Surface Unit."""

    sent: float = betterproto.float_field(1)
    received: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class NStreamers(betterproto.Message):
    """* Number of spectators connected to video stream."""

    main: int = betterproto.int32_field(1)
    guestport: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class TiltAngle(betterproto.Message):
    """* Angle of tilt camera in degrees."""

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class TiltVelocity(betterproto.Message):
    """* Relative velocity of tilt"""

    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class DroneInfo(betterproto.Message):
    """
    * Information about the drone. This message contains serial numbers and
    version informattion for internal components in the drone. Primarily used
    for diagnostics, or to determine the origin of a logfile.
    """

    blunux_version: str = betterproto.string_field(1)
    serial_number: bytes = betterproto.bytes_field(2)
    hardware_id: bytes = betterproto.bytes_field(3)
    model: "Model" = betterproto.enum_field(4)
    mb_serial: bytes = betterproto.bytes_field(5)
    bb_serial: bytes = betterproto.bytes_field(6)
    ds_serial: bytes = betterproto.bytes_field(10)
    mb_uid: bytes = betterproto.bytes_field(7)
    bb_uid: bytes = betterproto.bytes_field(8)
    gp: "GuestPortInfo" = betterproto.message_field(9)
    depth_sensor: "PressureSensorType" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class ErrorFlags(betterproto.Message):
    """* Known error states for the drone."""

    pmu_comm_ack: bool = betterproto.bool_field(1)
    """
    Acknowledge message not received for a message published to internal micro
    controller
    """

    pmu_comm_stream: bool = betterproto.bool_field(2)
    depth_read: bool = betterproto.bool_field(3)
    depth_spike: bool = betterproto.bool_field(4)
    inner_pressure_read: bool = betterproto.bool_field(5)
    inner_pressure_spike: bool = betterproto.bool_field(6)
    compass_calibration: bool = betterproto.bool_field(7)
    tilt_calibration: bool = betterproto.bool_field(8)
    gp1_read: bool = betterproto.bool_field(9)
    gp2_read: bool = betterproto.bool_field(10)
    gp3_read: bool = betterproto.bool_field(11)
    gp1_not_flashed: bool = betterproto.bool_field(12)
    gp2_not_flashed: bool = betterproto.bool_field(13)
    gp3_not_flashed: bool = betterproto.bool_field(14)
    gp1_unknown_device: bool = betterproto.bool_field(15)
    gp2_unknown_device: bool = betterproto.bool_field(16)
    gp3_unknown_device: bool = betterproto.bool_field(17)
    gp1_device_connection: bool = betterproto.bool_field(18)
    gp2_device_connection: bool = betterproto.bool_field(19)
    gp3_device_connection: bool = betterproto.bool_field(20)
    gp1_device: bool = betterproto.bool_field(21)
    gp2_device: bool = betterproto.bool_field(22)
    gp3_device: bool = betterproto.bool_field(23)
    drone_serial_not_set: bool = betterproto.bool_field(24)
    drone_serial: bool = betterproto.bool_field(25)
    mb_eeprom_read: bool = betterproto.bool_field(26)
    bb_eeprom_read: bool = betterproto.bool_field(27)
    mb_eeprom_not_flashed: bool = betterproto.bool_field(28)
    bb_eeprom_not_flashed: bool = betterproto.bool_field(29)
    main_camera_connection: bool = betterproto.bool_field(30)
    main_camera_firmware: bool = betterproto.bool_field(31)
    guestport_camera_connection: bool = betterproto.bool_field(32)
    guestport_camera_firmware: bool = betterproto.bool_field(33)
    mb_serial: bool = betterproto.bool_field(34)
    bb_serial: bool = betterproto.bool_field(35)
    ds_serial: bool = betterproto.bool_field(36)
    gp_current_read: bool = betterproto.bool_field(37)
    gp_current: bool = betterproto.bool_field(38)


@dataclass(eq=False, repr=False)
class CameraParameters(betterproto.Message):
    """* Camera parameters."""

    h264_bitrate: int = betterproto.int32_field(1)
    mjpg_bitrate: int = betterproto.int32_field(2)
    exposure: int = betterproto.int32_field(3)
    white_balance: int = betterproto.int32_field(4)
    hue: int = betterproto.int32_field(5)
    gain: float = betterproto.float_field(9)
    resolution: "Resolution" = betterproto.enum_field(6)
    framerate: "Framerate" = betterproto.enum_field(7)
    camera: "Camera" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class OverlayParameters(betterproto.Message):
    """
    * Overlay parameters. All available parameters that can be used to
    configure telemetry overlay on video recordings.
    """

    temperature_enabled: bool = betterproto.bool_field(1)
    depth_enabled: bool = betterproto.bool_field(2)
    heading_enabled: bool = betterproto.bool_field(3)
    tilt_enabled: bool = betterproto.bool_field(4)
    thickness_enabled: bool = betterproto.bool_field(18)
    date_enabled: bool = betterproto.bool_field(5)
    distance_enabled: bool = betterproto.bool_field(20)
    altitude_enabled: bool = betterproto.bool_field(21)
    cp_probe_enabled: bool = betterproto.bool_field(22)
    drone_location_enabled: bool = betterproto.bool_field(23)
    logo_type: "LogoType" = betterproto.enum_field(6)
    depth_unit: "DepthUnit" = betterproto.enum_field(7)
    temperature_unit: "TemperatureUnit" = betterproto.enum_field(8)
    thickness_unit: "ThicknessUnit" = betterproto.enum_field(19)
    timezone_offset: int = betterproto.int32_field(9)
    margin_width: int = betterproto.int32_field(10)
    margin_height: int = betterproto.int32_field(11)
    font_size: "FontSize" = betterproto.enum_field(12)
    title: str = betterproto.string_field(13)
    subtitle: str = betterproto.string_field(14)
    date_format: str = betterproto.string_field(16)
    shading: float = betterproto.float_field(17)
    """
    * Pixel intensity to subtract from text background (range is 0.0-1.0), (0
    is transparent and 1 is black)
    """


@dataclass(eq=False, repr=False)
class NavigationSensorStatus(betterproto.Message):
    """
    * Navigation sensor used in the position observer with validity state
    """

    sensor_id: "NavigationSensorId" = betterproto.enum_field(1)
    is_valid: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GuestPortDevice(betterproto.Message):
    """* GuestPort device."""

    device_id: "GuestPortDeviceId" = betterproto.enum_field(1)
    manufacturer: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    serial_number: str = betterproto.string_field(4)
    depth_rating: float = betterproto.float_field(5)
    required_blunux_version: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class GuestPortDeviceList(betterproto.Message):
    """* List of guest port devices."""

    devices: List["GuestPortDevice"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestPortConnectorInfo(betterproto.Message):
    """* GuestPort connector information."""

    device_list: "GuestPortDeviceList" = betterproto.message_field(
        1, group="connected_device"
    )
    error: "GuestPortError" = betterproto.enum_field(2, group="connected_device")


@dataclass(eq=False, repr=False)
class GuestPortInfo(betterproto.Message):
    """* GuestPort information."""

    gp1: "GuestPortConnectorInfo" = betterproto.message_field(1)
    gp2: "GuestPortConnectorInfo" = betterproto.message_field(2)
    gp3: "GuestPortConnectorInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ThicknessGauge(betterproto.Message):
    """* Thickness measurement data from a Cygnus Thickness Gauge."""

    thickness_measurement: float = betterproto.float_field(1)
    echo_count: int = betterproto.uint32_field(2)
    sound_velocity: int = betterproto.uint32_field(3)
    is_measurement_valid: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class CpProbe(betterproto.Message):
    """* Reading from a Cathodic Protection Potential probe."""

    measurement: float = betterproto.float_field(1)
    is_measurement_valid: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MotionInputCtrl(betterproto.Message):
    """
    * Issue a command to move the drone in the surge, sway, heave, or yaw
    direction.
    """

    motion_input: "MotionInput" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TiltVelocityCtrl(betterproto.Message):
    """* Issue a command to tilt the drone camera."""

    velocity: "TiltVelocity" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LightsCtrl(betterproto.Message):
    """* Issue a command to set the main light intensity."""

    lights: "Lights" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestportLightsCtrl(betterproto.Message):
    """* Issue a command to set the guest port light intensity."""

    lights: "Lights" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PilotGpsPositionCtrl(betterproto.Message):
    """* Issue a command with the GPS position of the pilot."""

    position: "LatLongPosition" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WatchdogCtrl(betterproto.Message):
    """
    * Issue a watchdog message to indicate that the remote client is connected
    and working as expected. If a watchdog message is not received every
    second, the drone will turn off lights and other auto functions to indicate
    that connection with the client has been lost.
    """

    connection_duration: "ConnectionDuration" = betterproto.message_field(1)
    client_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RecordCtrl(betterproto.Message):
    """* Issue a command to start video recording."""

    record_on: "RecordOn" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TakePictureCtrl(betterproto.Message):
    """* Issue a command to take a picture."""

    pass


@dataclass(eq=False, repr=False)
class StartCalibrationCtrl(betterproto.Message):
    """* Issue a command to start compass calibration."""

    pass


@dataclass(eq=False, repr=False)
class CancelCalibrationCtrl(betterproto.Message):
    """* Issue a command to cancel compass calibration."""

    pass


@dataclass(eq=False, repr=False)
class FinishCalibrationCtrl(betterproto.Message):
    """* Issue a command to finish compass calibration."""

    pass


@dataclass(eq=False, repr=False)
class AutoHeadingCtrl(betterproto.Message):
    """* Issue a command to set auto heading to a desired state."""

    state: "AutoHeadingState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AutoDepthCtrl(betterproto.Message):
    """* Issue a command to set auto depth to a desired state."""

    state: "AutoDepthState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AutoAltitudeCtrl(betterproto.Message):
    """* Issue a command to set auto altitude to a desired state."""

    state: "AutoAltitudeState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StationKeepingCtrl(betterproto.Message):
    """* Issue a command to set station keeping to a desired state."""

    state: "StationKeepingState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WeatherVaningCtrl(betterproto.Message):
    """
    * Issue a command to set station keeping with weather vaning to a desired
    state.
    """

    state: "WeatherVaningState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResetPositionCtrl(betterproto.Message):
    """* Issue a command to reset the position estimate."""

    pass


@dataclass(eq=False, repr=False)
class ResetOdometerCtrl(betterproto.Message):
    """* Issue a command to reset the odometer."""

    pass


@dataclass(eq=False, repr=False)
class TiltStabilizationCtrl(betterproto.Message):
    """* Issue a command to enable or disable tilt stabilization."""

    state: "TiltStabilizationState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WaterDensityCtrl(betterproto.Message):
    """* Issue a command to set the water density."""

    density: "WaterDensity" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PingerConfigurationCtrl(betterproto.Message):
    """* Issue a command to set the pinger configuration."""

    configuration: "PingerConfiguration" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SystemTimeCtrl(betterproto.Message):
    """* Issue a command to set the system time on the drone."""

    system_time: "SystemTime" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GripperCtrl(betterproto.Message):
    """* Issue a command to control the gripper."""

    gripper_velocities: "GripperVelocities" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetOverlayParametersReq(betterproto.Message):
    """* Request to set video overlay parameters."""

    overlay_parameters: "OverlayParameters" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetOverlayParametersRep(betterproto.Message):
    """* Response after setting video overlay parameters."""

    pass


@dataclass(eq=False, repr=False)
class GetOverlayParametersReq(betterproto.Message):
    """* Request to get currently set video overlay parameters."""

    pass


@dataclass(eq=False, repr=False)
class GetOverlayParametersRep(betterproto.Message):
    """* Response with the currently set video overlay parameters."""

    overlay_parameters: "OverlayParameters" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetCameraParametersReq(betterproto.Message):
    """* Request to set camera parameters."""

    camera_parameters: "CameraParameters" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetCameraParametersRep(betterproto.Message):
    """* Response after setting the camera parameters."""

    pass


@dataclass(eq=False, repr=False)
class GetCameraParametersReq(betterproto.Message):
    """* Request to get the currently set camera parameters."""

    camera: "Camera" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetCameraParametersRep(betterproto.Message):
    """* Response with the currently set camera parameters."""

    camera_parameters: "CameraParameters" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SyncTimeReq(betterproto.Message):
    """* Request to set the system time on the drone."""

    time: "SystemTime" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SyncTimeRep(betterproto.Message):
    """* Response after setting the system time on the drone."""

    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class PingReq(betterproto.Message):
    """
    * The simplest message to use to test request/reply communication with the
    drone. The drone replies with a PingRep message immediately after receiving
    the PingReq.
    """

    pass


@dataclass(eq=False, repr=False)
class PingRep(betterproto.Message):
    """* Response message from a PingReq request."""

    pass


@dataclass(eq=False, repr=False)
class SetThicknessGaugeParametersReq(betterproto.Message):
    """
    * Request to set parameters for ultrasonic thickness gauge. The sound
    velocity is used to calculate the thickness of the material being measured.
    """

    sound_velocity: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetThicknessGaugeParametersRep(betterproto.Message):
    """* Response after setting thicknes gauge parameters."""

    pass


@dataclass(eq=False, repr=False)
class ConnectClientReq(betterproto.Message):
    """* Connect a new client to the drone."""

    client_info: "ClientInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ConnectClientRep(betterproto.Message):
    """
    * Response after connecting a client to the drone. Contains information
    about which client is in control, and a list of all connected clients.
    """

    client_id: int = betterproto.uint32_field(1)
    client_id_in_control: int = betterproto.uint32_field(2)
    connected_clients: List["ConnectedClient"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class DisconnectClientReq(betterproto.Message):
    """
    * Disconnect a client from the drone. This request will remove the client
    from the list of connected clients. It allows clients to disconnect
    instantly, without waiting for a watchdog to clear the client in control,
    or promote a new client to be in control.
    """

    client_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DisconnectClientRep(betterproto.Message):
    """
    * Response after disconnecting a client from the drone. Contains
    information about which clients are connected and in control.
    """

    client_id_in_control: int = betterproto.uint32_field(1)
    connected_clients: List["ConnectedClient"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AttitudeTel(betterproto.Message):
    """* Receive the current attitude of the drone."""

    attitude: "Attitude" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AltitudeTel(betterproto.Message):
    """* Receive the current altitude of the drone."""

    altitude: "Altitude" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ForwardDistanceTel(betterproto.Message):
    forward_distance: "ForwardDistance" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PositionEstimateTel(betterproto.Message):
    position_estimate: "PositionEstimate" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DepthTel(betterproto.Message):
    depth: "Depth" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReferenceTel(betterproto.Message):
    reference: "Reference" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControllerHealthTel(betterproto.Message):
    controller_health: "ControllerHealth" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LightsTel(betterproto.Message):
    lights: "Lights" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestPortLightsTel(betterproto.Message):
    lights: "Lights" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PilotGpsPositionTel(betterproto.Message):
    position: "LatLongPosition" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RecordStateTel(betterproto.Message):
    record_state: "RecordState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BatteryTel(betterproto.Message):
    battery: "Battery" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BatteryBq40Z50Tel(betterproto.Message):
    battery: "BatteryBq40Z50" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DiveTimeTel(betterproto.Message):
    """Receive the dive time of the drone."""

    dive_time: "DiveTime" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DroneTimeTel(betterproto.Message):
    """Receive time information from the drone."""

    real_time_clock: "SystemTime" = betterproto.message_field(1)
    monotonic_clock: "SystemTime" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WaterTemperatureTel(betterproto.Message):
    temperature: "WaterTemperature" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CpuTemperatureTel(betterproto.Message):
    temperature: "CpuTemperature" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CanisterTemperatureTel(betterproto.Message):
    temperature: "CanisterTemperature" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CanisterHumidityTel(betterproto.Message):
    humidity: "CanisterHumidity" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class VideoStorageSpaceTel(betterproto.Message):
    storage_space: "StorageSpace" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DataStorageSpaceTel(betterproto.Message):
    storage_space: "StorageSpace" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CalibrationStateTel(betterproto.Message):
    calibration_state: "CalibrationState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TiltStabilizationTel(betterproto.Message):
    state: "TiltStabilizationState" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class IperfTel(betterproto.Message):
    status: "IperfStatus" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NStreamersTel(betterproto.Message):
    n_streamers: "NStreamers" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TiltAngleTel(betterproto.Message):
    angle: "TiltAngle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DroneInfoTel(betterproto.Message):
    """Receive metadata and information about the connected drone."""

    drone_info: "DroneInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ErrorFlagsTel(betterproto.Message):
    """* Receive currently set error flags."""

    error_flags: "ErrorFlags" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ControlModeTel(betterproto.Message):
    """* Receive the current state of the control system."""

    state: "ControlMode" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ThicknessGaugeTel(betterproto.Message):
    """* Thickness gauge measurement telemetry message."""

    thickness_gauge: "ThicknessGauge" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CpProbeTel(betterproto.Message):
    """* Cathodic Protection Potential probe telemetry message"""

    cp_probe: "CpProbe" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ConnectedClientsTel(betterproto.Message):
    """* List of connected clients telemetry message."""

    client_id_in_control: int = betterproto.uint32_field(1)
    connected_clients: List["ConnectedClient"] = betterproto.message_field(2)
